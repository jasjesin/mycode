================================================================================
[] How to create secret n configMaps:

create secret file test-secret.yaml like >>
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
type: Opaque
data:
  uid: <type output of echo <uid> | base64>    #<-- alwys add base64 encoded string for all key-value pairs
  passwd: <type output of echo <uid> | base64>

Example >>
jasdil@JasDiLMacAir k8s % echo testuser | base64
dGVzdHVzZXIK
jasdil@JasDiLMacAir k8s %
jasdil@JasDiLMacAir k8s % echo dGVzdHVzZXIK | base64 --decode
testuser
jasdil@JasDiLMacAir k8s %

n then, add this secret file in k8s, secrets r managed at cluster lvl, doesn't goes inside repo
deployment cfg file is checked into git repo.
Secrets n configMaps must b created before deployment

jasdil@JasDiLMacAir handson % kubectl apply -f test-secret.yaml
secret/test-secret created
jasdil@JasDiLMacAir handson % kubectl get secrets
NAME          TYPE     DATA   AGE
test-secret   Opaque   2      2s
jasdil@JasDiLMacAir handson %

Invoke this secret in test-deployment.yaml >>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-deployment
  labels:
    app: testapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: testapp
  template:
    metadata:
      labels:
        app: testapp
    spec:
      containers:
        - name: test
          image: mongo
          ports:
          - containerPort: 8080
          env:
          - name: USER
            valueFrom:
              secretKeyRef:
                name: test-secret
                key: uid
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: test-secret
                key: passwd




jasdil@JasDiLMacAir handson % kubectl apply -f test-deployment.yaml
deployment.apps/test-deployment created

jasdil@JasDiLMacAir handson % kubectl get deployment
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
test-deployment   1/1     1            1           36s

jasdil@JasDiLMacAir handson % kubectl get pod
NAME                               READY   STATUS    RESTARTS   AGE
test-deployment-5cbd9cc9b8-ckzrr   1/1     Running   0          43s
jasdil@JasDiLMacAir handson %

jasdil@JasDiLMacAir handson % kubectl get all
NAME                                   READY   STATUS    RESTARTS   AGE
pod/test-deployment-5cbd9cc9b8-ckzrr   1/1     Running   0          2m35s

NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   15d

NAME                              READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/test-deployment   1/1     1            1           2m35s

NAME                                         DESIRED   CURRENT   READY   AGE
replicaset.apps/test-deployment-5cbd9cc9b8   1         1         1       2m35s
jasdil@JasDiLMacAir handson %

jasdil@JasDiLMacAir handson % kubectl describe pod test-deployment-5cbd9cc9b8-ckzrr | tail -8
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  3m54s  default-scheduler  Successfully assigned default/test-deployment-5cbd9cc9b8-ckzrr to docker-desktop
  Normal  Pulling    3m53s  kubelet            Pulling image "mongo"
  Normal  Pulled     3m45s  kubelet            Successfully pulled image "mongo" in 8.7976439s
  Normal  Created    3m44s  kubelet            Created container test
  Normal  Started    3m44s  kubelet            Started container test
jasdil@JasDiLMacAir handson %

usually deployment n svc belong together, better to create 1 file for both, using separator ---
Append this to existing content >>
---
apiVersion: v1
kind: Service
metadata:
  name: test-svc
spec:
  selector:
    app: testapp
  ports:
  - protocol: TCP
    port: 80 #<-- svc port
    targetPort: 8080 #<-- containerPort of deployment


jasdil@JasDiLMacAir handson % kubectl apply -f test.yaml
deployment.apps/test-deployment unchanged
service/test-svc created
jasdil@JasDiLMacAir handson %

jasdil@JasDiLMacAir handson % kubectl get service
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP   15d
test-svc     ClusterIP   10.101.194.68   <none>        80/TCP    3m9s
jasdil@JasDiLMacAir handson %

jasdil@JasDiLMacAir handson % kubectl describe service test-svc
Name:              test-svc
Namespace:         default
Labels:            <none>
Annotations:       <none>
Selector:          app=testapp
Type:              ClusterIP
IP Family Policy:  SingleStack
IP Families:       IPv4
IP:                10.101.194.68
IPs:               10.101.194.68
Port:              <unset>  80/TCP
TargetPort:        8080/TCP
Endpoints:         10.1.0.38:8080   #<-- IP n port of the pod, for which config is defined in template
Session Affinity:  None
Events:            <none>
jasdil@JasDiLMacAir handson %

jasdil@JasDiLMacAir handson % kubectl get pod -o wide
NAME                               READY   STATUS    RESTARTS   AGE     IP          NODE             NOMINATED NODE   READINESS GATES
test-deployment-5cbd9cc9b8-6tm6k   1/1     Running   0          4m43s   10.1.0.38   docker-desktop   <none>           <none>
jasdil@JasDiLMacAir handson %                                         # SAME IP as seen above for Pod (confirmation)

configMap: external config for app, can be centralized for storage, other components can also use it
tes-configmap.yaml>>
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-configmap
data:
  url: test-svc                   #<-- svc name, defined under metadata, from test.yaml

  jasdil@JasDiLMacAir handson % kubectl apply -f test-configmap.yaml
  configmap/test-configmap created

  jasdil@JasDiLMacAir handson % kubectl get configmap
  NAME               DATA   AGE
  kube-root-ca.crt   1      15d
  test-configmap     1      7s
  jasdil@JasDiLMacAir handson %



  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: test1-deployment
    labels:
      app: test1app
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: test1app
    template:                       #<-- defines template for a pod's configuration like pod label/name, container spec
      metadata:
        labels:
          app: test1app
      spec:
        containers:
          - name: test1
            image: mongo-express
            ports:
            - containerPort: 8080
            env:                    #<-- specifies creation n use of env variables (to be defined below)
            - name: USER
              valueFrom:            #<-- informing where to fetch value from
                secretKeyRef:       #<-- informing that data needs to be fetched from a secret file's key
                  name: test-secret #<-- metadata name from secret file
                  key: uid          #<-- data keyname from secret file
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test-secret
                  key: passwd
            - name: URL
              valueFrom:
                configMapKeyRef:
                  name: test-configmap
                  key: url
  ---
  apiVersion: v1
  kind: Service
  metadata:
    name: test1-svc
  spec:
    selector:
      app: test1app
    type: LoadBalancer              #<-- accepts external requests, by assigning svc & external IP address

    ports:
    - protocol: TCP
      port: 8180                    #<-- svc port
      targetPort: 8080              #<-- containerPort of deployment
      nodePort: 30000               #<-- port whr external IP address will be open, to access from browser
                                    #<-- This nodePort has a range b/w 30000-32767

  jasdil@JasDiLMacAir handson % kubectl apply -f test1.yaml
  deployment.apps/test-deployment configured

  jasdil@JasDiLMacAir handson % kubectl apply -f test1.yaml
  deployment.apps/test1-deployment created
  service/test1-svc created
  jasdil@JasDiLMacAir handson %

jasdil@JasDiLMacAir handson % kubectl get service
NAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
kubernetes   ClusterIP      10.96.0.1       <none>        443/TCP          15d
test-svc     ClusterIP      10.101.194.68   <none>        80/TCP           24m
test1-svc    LoadBalancer   10.109.87.147   localhost     8180:30000/TCP   48s #<-- wid nodePort, svc is defined as LB
jasdil@JasDiLMacAir handson %             # external IP address assigned to svc


ClusterIP is same as internal svc type as default, not accessible frm outside
ClusterIP will give internal IP address to svc
LB will also give internal IP address to svc but in addition to that, it will also give external IP address to svc


================================================================================
